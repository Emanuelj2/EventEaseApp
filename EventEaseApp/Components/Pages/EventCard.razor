@page "/eventcard"
@using EventEaseApp.Models
@using EventEaseApp.Services
@using System.Globalization
@inject IEventService EventService
@rendermode InteractiveServer

<h3 class="mb-4 text-center">🎉 Create Your Event</h3>

<!-- 📝 Event Creation Form -->
<div class="row justify-content-center mb-4">
    <div class="card shadow-sm border-0" style="max-width: 500px;">
        <div class="card-body">
            <EditForm Model="@NewEvent" OnValidSubmit="@HandleSubmit" FormName="EventCardForm">
                <DataAnnotationsValidator />
                <ValidationSummary />
                
                <div class="mb-3">
                    <label class="form-label">Event Name</label>
                    <InputText class="form-control" @bind-Value="NewEvent.Name" />
                    <ValidationMessage For="@(() => NewEvent.Name)" />
                </div>
                
                <div class="mb-3">
                    <label class="form-label">Date</label>
                    <InputDate class="form-control" @bind-Value="NewEvent.Date" />
                    <ValidationMessage For="@(() => NewEvent.Date)" />
                </div>
                
                <div class="mb-3">
                    <label class="form-label">Location</label>
                    <InputText class="form-control" @bind-Value="NewEvent.Location" />
                    <ValidationMessage For="@(() => NewEvent.Location)" />
                </div>
                
                <div class="mb-3">
                    <label class="form-label">Time</label>
                    <InputText class="form-control" @bind-Value="NewEvent.Time" />
                    <ValidationMessage For="@(() => NewEvent.Time)" />
                </div>
                
                <button type="submit" class="btn btn-primary">Add Event</button>
            </EditForm>
        </div>
    </div>
</div>



<!-- 📋 Display All Created Events -->
@if (Events != null && Events.Any())
{
    <h4 class="mb-3 text-center">📅 Your Events</h4>
    @foreach (var evt in Events)
    {
        <div class="row justify-content-center mb-4">
            <div class="card shadow-sm border-0" style="max-width: 500px;">
                <div class="card-header bg-success text-white d-flex justify-content-between align-items-center">
                    <span><strong>@evt.Name</strong></span>
                    <span class="badge bg-light text-success">Scheduled</span>
                </div>
                <div class="card-body">
                    <ul class="list-unstyled mb-3">
                        <li><i class="bi bi-calendar-event"></i> Date: @evt.Date.ToString("MMMM dd, yyyy", CultureInfo.InvariantCulture)</li>
                        <li><i class="bi bi-geo-alt"></i> Location: @evt.Location</li>
                        <li><i class="bi bi-clock"></i> Time: @evt.Time</li>
                    </ul>
                    

                    <button class="btn btn-outline-danger ms-2" @onclick="() => DeleteEvent(evt.Id)">Delete</button>
                </div>
            </div>
        </div>
    }
}
else if (Events != null && !Events.Any())
{
    <div class="text-center">
        <p class="text-muted">No events created yet. Create your first event above!</p>
    </div>
}

@code {
    [SupplyParameterFromForm]
    private EventModel NewEvent { get; set; } = new EventModel();
    
    private List<EventModel> Events { get; set; } = new List<EventModel>();

    protected override async Task OnInitializedAsync()
    {
        // Initialize NewEvent if it's null (for first load)
        NewEvent ??= new EventModel { Date = DateTime.Today };
        
        try 
        {
            Events = await EventService.GetEventsAsync() ?? new List<EventModel>();
        }
        catch (Exception ex)
        {
            // Log the exception or handle it appropriately
            Console.WriteLine($"Error loading events: {ex.Message}");
            Events = new List<EventModel>();
        }
    }

    private async Task HandleSubmit()
    {
        try
        {
            await EventService.AddEventAsync(NewEvent);
            Events = await EventService.GetEventsAsync() ?? new List<EventModel>();
            
            // Reset the form
            NewEvent = new EventModel { Date = DateTime.Today };
            StateHasChanged(); // Force UI refresh
        }
        catch (Exception ex)
        {
            // Handle the exception appropriately
            Console.WriteLine($"Error adding event: {ex.Message}");
        }
    }

    private async Task DeleteEvent(int eventId)
    {
        try
        {
            await EventService.DeleteEventAsync(eventId);
            Events = await EventService.GetEventsAsync() ?? new List<EventModel>();
            StateHasChanged(); // Refresh UI
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting event: {ex.Message}");
        }
    }

}